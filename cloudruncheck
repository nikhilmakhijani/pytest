import os
import time
import google.auth
import requests
from google.auth.transport.requests import Request
from googleapiclient.discovery import build
from google.cloud import bigquery

PROJECT_ID = os.environ["GOOGLE_CLOUD_PROJECT"]
REGION = "your-region"  # e.g., us-central1

# Get internal Cloud Run services with name containing 'ava-app'
def get_ava_app_services():
    credentials, _ = google.auth.default()
    run_service = build("run", "v2", credentials=credentials)
    parent = f"projects/{PROJECT_ID}/locations/{REGION}"
    response = run_service.services().list(parent=parent).execute()

    services = []
    for svc in response.get("services", []):
        name = svc["name"].split("/")[-1]
        if "app" in name:
            url = svc.get("uri")
            if url:
                services.append({"name": name, "url": url})
    return services

# Generate ID token for internal auth
def get_id_token(audience):
    credentials, _ = google.auth.default()
    credentials = credentials.with_claims(audience=audience)
    credentials.refresh(Request())
    return credentials.token

# Log status to BigQuery
def write_status_to_bigquery(service_name, status):
    client = bigquery.Client()
    table_id = "your_project_id.your_dataset.uptime_logs"  # <-- Update this
    row = {
        "timestamp": time.strftime("%Y-%m-%dT%H:%M:%SZ", time.gmtime()),
        "service_name": service_name,
        "status": status
    }
    errors = client.insert_rows_json(table_id, [row])
    if errors:
        print(f"[BigQuery error] {errors}")
    else:
        print(f"[Logged] {service_name}: {status}")

# Main check loop
def run_check():
    services = get_app_services()
    print(f"Discovered {len(services)} services")
    for svc in services:
        try:
            token = get_id_token(svc["url"])
            headers = {"Authorization": f"Bearer {token}"}
            response = requests.get(svc["url"], headers=headers, timeout=5)
            status = 1 if response.status_code == 200 else 0
        except Exception as e:
            print(f"[ERROR] {svc['name']} failed: {e}")
            status = 0
        write_status_to_bigquery(svc["name"], status)

if __name__ == "__main__":
    run_check()